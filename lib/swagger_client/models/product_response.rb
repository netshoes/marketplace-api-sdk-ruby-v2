=begin
#API Marketplace Grupo Netshoes

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class ProductResponse
    attr_accessor :expands

    attr_accessor :sku

    attr_accessor :product_group

    attr_accessor :department

    attr_accessor :product_type

    attr_accessor :brand

    attr_accessor :name

    attr_accessor :description

    attr_accessor :color

    attr_accessor :flavor

    attr_accessor :gender

    attr_accessor :manufacturer_code

    attr_accessor :size

    attr_accessor :ean_isbn

    attr_accessor :height

    attr_accessor :width

    attr_accessor :depth

    attr_accessor :weight

    attr_accessor :video

    attr_accessor :images

    attr_accessor :attributes

    attr_accessor :links


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'expands' => :'expands',
        :'sku' => :'sku',
        :'product_group' => :'productGroup',
        :'department' => :'department',
        :'product_type' => :'productType',
        :'brand' => :'brand',
        :'name' => :'name',
        :'description' => :'description',
        :'color' => :'color',
        :'flavor' => :'flavor',
        :'gender' => :'gender',
        :'manufacturer_code' => :'manufacturerCode',
        :'size' => :'size',
        :'ean_isbn' => :'eanIsbn',
        :'height' => :'height',
        :'width' => :'width',
        :'depth' => :'depth',
        :'weight' => :'weight',
        :'video' => :'video',
        :'images' => :'images',
        :'attributes' => :'attributes',
        :'links' => :'links'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'expands' => :'Array<String>',
        :'sku' => :'String',
        :'product_group' => :'String',
        :'department' => :'String',
        :'product_type' => :'String',
        :'brand' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'color' => :'String',
        :'flavor' => :'String',
        :'gender' => :'String',
        :'manufacturer_code' => :'String',
        :'size' => :'String',
        :'ean_isbn' => :'String',
        :'height' => :'Float',
        :'width' => :'Float',
        :'depth' => :'Float',
        :'weight' => :'Float',
        :'video' => :'String',
        :'images' => :'Array<InlineResponse200ItemsImages>',
        :'attributes' => :'Array<InlineResponse200ItemsAttributes>',
        :'links' => :'Array<InlineResponse200ItemsLinks>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'expands')
        if (value = attributes[:'expands']).is_a?(Array)
          self.expands = value
        end
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'productGroup')
        self.product_group = attributes[:'productGroup']
      end

      if attributes.has_key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.has_key?(:'productType')
        self.product_type = attributes[:'productType']
      end

      if attributes.has_key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'flavor')
        self.flavor = attributes[:'flavor']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'manufacturerCode')
        self.manufacturer_code = attributes[:'manufacturerCode']
      end

      if attributes.has_key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.has_key?(:'eanIsbn')
        self.ean_isbn = attributes[:'eanIsbn']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.has_key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.has_key?(:'depth')
        self.depth = attributes[:'depth']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'video')
        self.video = attributes[:'video']
      end

      if attributes.has_key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.has_key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          expands == o.expands &&
          sku == o.sku &&
          product_group == o.product_group &&
          department == o.department &&
          product_type == o.product_type &&
          brand == o.brand &&
          name == o.name &&
          description == o.description &&
          color == o.color &&
          flavor == o.flavor &&
          gender == o.gender &&
          manufacturer_code == o.manufacturer_code &&
          size == o.size &&
          ean_isbn == o.ean_isbn &&
          height == o.height &&
          width == o.width &&
          depth == o.depth &&
          weight == o.weight &&
          video == o.video &&
          images == o.images &&
          attributes == o.attributes &&
          links == o.links
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [expands, sku, product_group, department, product_type, brand, name, description, color, flavor, gender, manufacturer_code, size, ean_isbn, height, width, depth, weight, video, images, attributes, links].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
